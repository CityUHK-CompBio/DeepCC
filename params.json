{
  "name": "Deepcc",
  "tagline": "a deep learning-based framework for cancer classification",
  "body": "# DeepCC\r\nDeepCC: a deep learning-based framework for cancer classification\r\n\r\n## Dependencies\r\nCPU version of DeepCC depends on H2O deep learning framework, implemented by Java thus you should install JRE first. Please following the instructions on [h2o.ai](http://www.h2o.ai/download/h2o/r).\r\n\r\nGPU-accelarated DeepCC uses MXNET as its backend and is currently undergoing test, with limited functions.\r\n\r\n## Installation\r\nYou can install DeepCC from GitHub directly using devtools.\r\n```\r\ninstall.packages(\"devtools\")\r\ndevtools::install_github(\"CityUHK-CompBio/DeepCC\")\r\n```\r\n\r\n## Quick start\r\nAs a case study, you can obtain well organized colorectal cancer data from CRCSC's repository on [Synapse](https://www.synapse.org/#!Synapse:syn2623706/wiki/).\r\n\r\nDeepCC only need two input for start.\r\n- a data.frame containing gene expression profiles (each row represents one patient sample and the column names should be Entrez identifiers of genes)\r\n- a character vector containing training labels (`NA` is allowed since DeepCC can ignore them automatically)\r\n\r\nNow assume you have the gene expression profiles in `eps` and training labels in `labels`.\r\n```\r\nlibrary(DeepCC)\r\n\r\n# get functional spectra from gene expression profiles\r\n# use parameter \"cores\" to indicate how many cpu cores you what to use, by defaut DeepCC will use all your cores - 1.\r\nfs <- getFunctionalSpectra(eps)\r\n\r\n# train DeepCC model\r\n# use parameter \"cores\" to indicate how many cpu cores you what to use, by defaut DeepCC will use all your cores - 1.\r\ndeepcc.model <- trainDeepCCModel(fs, labels)\r\n\r\n# obtain deep features\r\ndf <- getDeepCCFeatures(deepcc.model, fs)\r\n```\r\n\r\nAfter training, now you can use your DeepCC model to classify new sample(s). DeepCC can classify samples in a data set, as well as individual samples. The input data should be in the same format as above gene expression profile(s).\r\n\r\n```\r\n# classify new data set used trained DeepCC model\r\n# for a batch of samples\r\nnew.fs <- getFunctionalSpectra(new.eps)\r\npred.lables <- getDeepCCLabels(deepcc.model, new.fs)\r\n\r\n# for a given single sample, you have to provide a reference expression profile.\r\nnew.fs <- getFunctionalSpectrum(new.ep, refExp = \"COADREAD\")\r\npred.lable <- getDeepCCLabels(deepcc.model, new.fs)\r\n```\r\nNote: You can generate customized reference expression profile from your previous data or public data, which is the same(similiar) cancer type and platform. Alternatively, you can use pre-defined reference in DeepCC by passing the cancer type (in the format of TCGA cancer types).\r\n\r\n\r\n## Pre-defined data in DeepCC\r\n\r\n### List of functional gene sets\r\nBy default, DeepCC will use MSigDB v5.0 (10,348 gene sets) to generate functional spectra.\r\n\r\nNote: If you have facilities to run GPU-accelarated DeepCC, we strongly suggest you use the least MSigDB v5.1 (13,311 gene sets) to get better classification performance.\r\n\r\n### Pre-defined reference\r\nIn DeepCC we prepared average expression profiles of each cancer types in TCGA project as references. To use them, just use the TCGA identifier (COADREAD, BRCA, OV, etc.) to indicate the cancer type.\r\n\r\nNote: if your single sample is microarray data, we strongly suggest you turn the parameter `inverseRescale` on, since TCGA is RNA-Seq data, which has very small expression value for low expressed genes, compared with microarray. `inverseRescale` can overcome this distribution different a little bit, but it's better to generate your customized reference.\r\n\r\n## Additional tools\r\n- `cross_validataion` performs cross validation.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}